<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:common="clr-namespace:WpfControlLibrary.Common"
    xmlns:requestJournal="clr-namespace:WpfControlLibrary.Model.RequestJournal"
    xmlns:buttons="clr-namespace:WpfControlLibrary.Buttons"
    xmlns:util="clr-namespace:WpfControlLibrary.Util"
    xmlns:view="clr-namespace:WpfControlLibrary.View"
    xmlns:converters="clr-namespace:WpfControlLibrary.View.Converters"
    xmlns:common1="clr-namespace:WpfControlLibrary.Model.Common"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:helpers="clr-namespace:WpfControlLibrary.Helpers" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    mc:Ignorable="d"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
	x:Class="WpfControlLibrary.RequestsJournalView2"
	x:Name="UserControl"
	d:DesignWidth="1000" d:DesignHeight="480">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/WpfControlLibrary;component/Resources/Resources.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/WPF.Bootstrap;component/Themes/Default.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <BooleanToVisibilityConverter x:Key="BoolToVis" />

            <converters:BooleanToVisibilityConverter  x:Key="BooleanToVisibilityConverterInvert" True="Visible" False="Collapsed" />
            <util:RequestMessagesSeenStatusConvertor4 x:Key="RequestMessagesSeenStatusConvertor4"/>
            <util:BoolToFontWeightInvertConverter x:Key="BoolToFontWeightInvertConverter"/>
            <util:RequestStatusConverter x:Key="RequestStatusConverter"/>
            <util:RequestNumberConverter x:Key="RequestNumberConverter"/>
            <util:MultiBooleanConverter x:Key="MultiBooleanConverter"/>
            <util:RequestMessagesHistoryConverter x:Key="RequestMessagesHistoryConverter"/>
            <util:RequestMessagesHistoryConverter2 x:Key="RequestMessagesHistoryConverter2"/>
            <util:RequestMessageThemeConverter x:Key="RequestMessageThemeConverter"/>
            <util:IfExistToVisibilityConverter x:Key="IfExistToVisibilityConverter"/>
            <util:SuperviserCheckedConverter x:Key="SuperviserCheckedConverter"/>

            <SolidColorBrush x:Key="CorrespodenseManagerBrush" Color="#d2b38d"/>
            <SolidColorBrush x:Key="CorrespodenseClientBrush" Color="#80cdf5"/>
            <SolidColorBrush x:Key="PopupHeaderBrush" Color="Silver"/>

            <Style x:Key="popupStyle" TargetType="{x:Type Popup}" >
                <Style.Triggers>
                    <Trigger Property="IsOpen" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Height" From="10" To="255" Duration="0:0:0.20" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="Button" x:Key="ReplyButton" BasedOn="{StaticResource ButtonBaseStyle}">
                <Setter Property="BorderBrush" Value="#CCCCCC"/>
                <Setter Property="Background" Value="Beige"/>
                <Setter Property="Foreground" Value="#333"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Style="{StaticResource BorderBaseStyle}" Name="container" Cursor="Hand" Padding="{TemplateBinding Padding}" 
                            BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                                <ContentPresenter TextBlock.Foreground="{TemplateBinding Foreground}"/>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup Name="CommonStates">
                                        <VisualState Name="Normal">

                                        </VisualState>
                                        <VisualState Name="MouseOver">
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetName="container" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                                        Duration="0:0:0.02" To="#E6E6E6"></ColorAnimation>
                                                <ColorAnimation Storyboard.TargetName="container" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                        Duration="0:0:0.02" To="#ADADAD"></ColorAnimation>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState Name="Pressed">
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetName="container" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" 
                                                        Duration="0:0:0.02" To="#d4d4d4"></ColorAnimation>
                                                <ColorAnimation Storyboard.TargetName="container" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                        Duration="0:0:0.02" To="#8c8c8c"></ColorAnimation>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="container" Storyboard.TargetProperty="Opacity"
                                                         Duration="0:0:0.02" To="0.8"></DoubleAnimation>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="HeaderCorrespWithClient" TargetType="{x:Type DataGridColumnHeader}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding DataContext.ShowCorrespondenceWithClient, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
                        <Setter Property="Background" Value="{StaticResource CorrespodenseClientBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="HeaderCorrespWithManager" TargetType="{x:Type DataGridColumnHeader}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding DataContext.ShowCorrespondenceWithManager, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
                        <Setter Property="Background" Value="{StaticResource CorrespodenseManagerBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            
            <Style x:Key="CorrespondenceBorder" TargetType="{x:Type Border}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding DataContext.ShowCorrespondenceWithManager, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
                        <Setter Property="Background" Value="{StaticResource CorrespodenseManagerBrush}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.ShowCorrespondenceWithClient, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
                        <Setter Property="Background" Value="{StaticResource CorrespodenseClientBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            
            <Style x:Key="CorrespondenceView" TargetType="{x:Type UserControl}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding DataContext.ShowCorrespondenceWithManager, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
                        <Setter Property="DataContext" Value="{Binding RequestMessagesViewModelMtM}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.ShowCorrespondenceWithClient, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
                        <Setter Property="DataContext" Value="{Binding RequestMessagesViewModelMtC}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="HeaderButton" TargetType="{x:Type Button}">
            	<Setter Property="Margin" Value="0"/>
            	<Setter Property="Width" Value="Auto"/>
            	<Setter Property="Background" Value="Transparent"/>
            	<Setter Property="BorderThickness" Value="0"/>
            	<Setter Property="BorderBrush" Value="Transparent"/>
            </Style>
            
            <ControlTemplate x:Key="TextFilter">
            	<Grid>
            		<Grid.RowDefinitions>
            			<RowDefinition Height="Auto"/>
            			<RowDefinition Height="Auto"/>
            		</Grid.RowDefinitions>
            		<TextBlock HorizontalAlignment="Center" Text="{Binding Name}"/>
            		<TextBox HorizontalAlignment="Center" Margin="0,5,0,0" Grid.Row="1" Text="{Binding Text}"/>
            	</Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="RequestStatusFilter">
            	<Grid>
            		<Grid.RowDefinitions>
            			<RowDefinition Height="Auto"/>
            			<RowDefinition Height="Auto"/>
            		</Grid.RowDefinitions>
            		<TextBlock HorizontalAlignment="Center" Text="{Binding Name}"/>
            		<ComboBox HorizontalAlignment="Stretch" Margin="0,5,0,0" Grid.Row="1" SelectedItem="{Binding Value}" ItemsSource="{Binding Values}">
            			<ComboBox.ItemTemplate>
            				<DataTemplate DataType="requestJournal:RequestStatus">
            					<TextBlock Text="{Binding Name}"/>
            				</DataTemplate>
            			</ComboBox.ItemTemplate>
            		</ComboBox>
            	</Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="RequestSubStatusFilter">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock HorizontalAlignment="Center" Text="{Binding Name}"/>
                    <ComboBox HorizontalAlignment="Stretch" Margin="0,5,0,0" Grid.Row="1" SelectedItem="{Binding Value}" ItemsSource="{Binding Values}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate DataType="requestJournal:RequestSubStatus">
                                <TextBlock Text="{Binding Name}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="ProblemsFilter">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock HorizontalAlignment="Center" Text="{Binding Name}"/>
                    <ComboBox HorizontalAlignment="Stretch" Margin="0,5,0,0" Grid.Row="1" SelectedItem="{Binding Value}" ItemsSource="{Binding Values}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate DataType="requestJournal:RequestProblem">
                                <TextBlock Text="{Binding ProblemName}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="PerformerFilter">
            	<Grid>
            		<Grid.RowDefinitions>
            			<RowDefinition Height="Auto"/>
            			<RowDefinition Height="Auto"/>
            		</Grid.RowDefinitions>
            		<TextBlock HorizontalAlignment="Center" Text="{Binding Name}"/>
            		<ComboBox HorizontalAlignment="Stretch" Margin="0,5,0,0" Grid.Row="1" SelectedItem="{Binding Value}" ItemsSource="{Binding Values}">
            			<ComboBox.ItemTemplate>
            				<DataTemplate DataType="common1:User">
            					<TextBlock Text="{Binding Name}"/>
            				</DataTemplate>
            			</ComboBox.ItemTemplate>
            		</ComboBox>
            	</Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="DateFilter">
            	<Grid>
            		<Grid.RowDefinitions>
            			<RowDefinition Height="Auto"/>
            			<RowDefinition Height="Auto"/>
            		</Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <CheckBox IsChecked="{Binding Enabled, Mode=TwoWay}"/>
            		    <TextBlock HorizontalAlignment="Center" Text="{Binding Name}"/>
                    </StackPanel>
                    <StackPanel HorizontalAlignment="Center" Margin="0,3,0,0"  Grid.Row="1" Orientation="Horizontal">
            			<TextBlock VerticalAlignment="Center" Text="от"/>
            			<DatePicker SelectedDate="{Binding DateBegin, Mode=TwoWay}" Margin="3,0,0,0"/>
            			<TextBlock VerticalAlignment="Center" Text="до" Margin="5,0,0,0"/>
            			<DatePicker SelectedDate="{Binding DateEnd, Mode=TwoWay}" Margin="3,0,0,0"/>
            		</StackPanel>
            	</Grid>
            </ControlTemplate>
        	
			<Style x:Key="ComboBoxFocusVisual">
        		<Setter Property="Control.Template">
        			<Setter.Value>
        				<ControlTemplate>
        					<Rectangle Margin="4,4,21,4" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	
			<Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
        	
			<Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
        		<Setter Property="OverridesDefaultStyle" Value="true"/>
        		<Setter Property="IsTabStop" Value="false"/>
        		<Setter Property="Focusable" Value="false"/>
        		<Setter Property="ClickMode" Value="Press"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ToggleButton}">
        					<Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" SnapsToDevicePixels="true">
        						<Grid HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
        							<Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center"/>
        						</Grid>
        					</Themes:ButtonChrome>
        					<ControlTemplate.Triggers>
        						<Trigger Property="IsChecked" Value="true">
        							<Setter Property="RenderPressed" TargetName="Chrome" Value="true"/>
        						</Trigger>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	
			<LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
        		<GradientStop Color="#ABADB3" Offset="0.05"/>
        		<GradientStop Color="#E2E3EA" Offset="0.07"/>
        		<GradientStop Color="#E3E9EF" Offset="1"/>
        	</LinearGradientBrush>
        	<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        		<Setter Property="OverridesDefaultStyle" Value="true"/>
        		<Setter Property="AllowDrop" Value="true"/>
        		<Setter Property="MinWidth" Value="0"/>
        		<Setter Property="MinHeight" Value="0"/>
        		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type TextBox}">
        					<ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	
			<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        		<Setter Property="OverridesDefaultStyle" Value="true"/>
        		<Setter Property="IsTabStop" Value="false"/>
        		<Setter Property="Focusable" Value="false"/>
        		<Setter Property="ClickMode" Value="Press"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ToggleButton}">
        					<Button Style="{StaticResource BeigeButton}" x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true" 
                                                 Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
        						<Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center"/>
        					</Button>
        					<ControlTemplate.Triggers>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>
        	</Style>
        	
			<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        		<Grid x:Name="Placement" SnapsToDevicePixels="true">
        			<Grid.ColumnDefinitions>
        				<ColumnDefinition Width="*"/>
        				<ColumnDefinition Width="Auto"/>
        			</Grid.ColumnDefinitions>
        			<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
        				<Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Placement}">
        					<Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
        						<ScrollViewer>
        							<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        						</ScrollViewer>
        					</Border>
        				</Themes:SystemDropShadowChrome>
        			</Popup>
        			<Themes:ListBoxChrome x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                          Background="{TemplateBinding Background}" Grid.ColumnSpan="2" RenderMouseOver="{TemplateBinding IsMouseOver}" 
                                          RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"/>
        			<TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                             IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" 
                             Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
        			<ToggleButton Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                  Style="{StaticResource ComboBoxToggleButton}"/>
        		</Grid>
        		<ControlTemplate.Triggers>
        			<Trigger Property="IsKeyboardFocusWithin" Value="true">
        				<Setter Property="Foreground" Value="Black"/>
        			</Trigger>
        			<Trigger Property="IsDropDownOpen" Value="true">
        				<Setter Property="RenderFocused" TargetName="Border" Value="true"/>
        			</Trigger>
        			<Trigger Property="HasItems" Value="false">
        				<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
        			</Trigger>
        			<Trigger Property="IsEnabled" Value="false">
        				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        <Setter Property="Background" Value="#FFF4F4F4"/>
        			</Trigger>
        			<Trigger Property="IsGrouping" Value="true">
        				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
        			</Trigger>
        			<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
        				<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
        				<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
        			</Trigger>
        		</ControlTemplate.Triggers>
        	</ControlTemplate>
        	
			<Style x:Key="ComboBoxStatusStyle" TargetType="{x:Type ComboBox}">
        		<Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
        		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        		<Setter Property="BorderThickness" Value="1"/>
        		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        		<Setter Property="Padding" Value="4,3"/>
        		<Setter Property="Template">
        			<Setter.Value>
        				<ControlTemplate TargetType="{x:Type ComboBox}">
        					<Grid x:Name="MainGrid" SnapsToDevicePixels="true">
        						<Grid.ColumnDefinitions>
        							<ColumnDefinition Width="*"/>
        							<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
        						</Grid.ColumnDefinitions>
        						<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                       Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
        							<Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                                                   MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="LightBlue">
        									<ScrollViewer CanContentScroll="true">
        										<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{DynamicResource ItemsPresenterStyle1}"/>
        									</ScrollViewer>
        								</Border>
        							</Themes:SystemDropShadowChrome>
        						</Popup>
        						<ToggleButton BorderBrush="{TemplateBinding BorderBrush}" Background="beige" Grid.ColumnSpan="2" 
                                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                              Style="{StaticResource ComboBoxReadonlyToggleButton}"/>
        						<ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                                  Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        					</Grid>
        					<ControlTemplate.Triggers>
        						<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
        							<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
        							<Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
        						</Trigger>
        						<Trigger Property="HasItems" Value="false">
        							<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
        						</Trigger>
        						<Trigger Property="IsEnabled" Value="false">
        							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        							<Setter Property="Background" Value="#FFF4F4F4"/>
        						</Trigger>
        						<Trigger Property="IsGrouping" Value="true">
        							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
        						</Trigger>
        					</ControlTemplate.Triggers>
        				</ControlTemplate>
        			</Setter.Value>
        		</Setter>

        		<Style.Triggers>
					<Trigger Property="IsEditable" Value="true">
						<Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
						<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
						<Setter Property="IsTabStop" Value="false"/>
						<Setter Property="Padding" Value="3"/>
						<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
					</Trigger>
				</Style.Triggers>
        	</Style>
            
			<Style x:Key="ItemsPresenterStyle1" TargetType="{x:Type ItemsPresenter}">
                <Style.Resources>
                    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent"/>
                </Style.Resources>
            </Style>

            <!--<Style x:Key="ManagerCorrespondenceCells" TargetType="{x:Type DataGridCell}">
                <EventSetter Event="MouseDoubleClick" Handler="{Binding ShowManagerCorrespondence}"/>
            </Style>-->

            <Style x:Key="BodyContentDataGridCentering" TargetType="{x:Type DataGridCell}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridCell}">
                            <Grid Background="{TemplateBinding Background}">
                                <ContentPresenter VerticalAlignment="Center" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <ControlTemplate x:Key="TextInfo">
                <Border Height="27"  Background="White" BorderBrush="Black" BorderThickness="1">
                    <TextBlock VerticalAlignment="Center" Foreground="Red" Name="TextBlock" TextAlignment="Center" Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger SourceName="TextBlock" Property="Text" Value="0">
                        <Setter TargetName="TextBlock" Property="Foreground" Value="Black"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            
            <ControlTemplate x:Key="ProblemsControl">
                <StackPanel Orientation="Horizontal">
                    <Button VerticalAlignment="Bottom" Content="Проблемные заявки" Style="{StaticResource RedButton}" Command="{Binding ShowAllProblemRequestsCmd}"/>
                    <StackPanel Margin="3,0,0,0" Orientation="Vertical">
                        <Button Height="22" FontSize="12" Content="Все " Style="{StaticResource InlineButton2}" Command="{Binding ShowAllProblemRequestsCmd}"/>
                        <Control Margin="0,-1,0,0" Template="{StaticResource TextInfo}" Tag="{Binding ProblemsCountAll}"/>
                    </StackPanel>
                    <StackPanel Margin="-1,0,0,0" Orientation="Vertical">
                        <Button Height="22" FontSize="12" Content="Мои" Style="{StaticResource InlineButton2}" Command="{Binding ShowSelfProblemRequestsCmd}"/>
                        <Control Margin="0,-1,0,0"  Template="{StaticResource TextInfo}" Tag="{Binding ProblemsCountSelf}"/>
                    </StackPanel>
                </StackPanel>
            </ControlTemplate>

            <BitmapImage x:Key="GearImage" UriSource="../img/gear.png" />

            <ControlTemplate x:Key="ClientFilter">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.ColumnSpan="2" HorizontalAlignment="Center" Text="{Binding Name}"/>
                    <ComboBox MinWidth="100" HorizontalAlignment="Stretch" Margin="0,5,0,0" Grid.Row="1" Grid.Column="0" SelectedItem="{Binding Value}" ItemsSource="{Binding Values}"/>
                    <Border BorderThickness="1" BorderBrush="Gray" VerticalAlignment="Bottom" Margin="5,0,0,0" Height="24" Grid.Row="1" Grid.Column="1" Background="White">
                        <TextBox Text="{Binding DataContext.SenderAddressFilter, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}, Mode=TwoWay}"
                                 Style="{StaticResource TbSimple}" MinWidth="100" Name="TextBlock" IsReadOnly="False" />
                    </Border>
                </Grid>
            </ControlTemplate>

            <sys:Double x:Key="HFontSize">14</sys:Double>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid Background="#F0F0F0">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="1*"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="1" Margin="5,0,5,5" Padding="5" Background="#C6C3C6" BorderBrush="Gray" BorderThickness="1">
            <StackPanel  Orientation="Horizontal" >
                <StackPanel.Resources>
                    <Style TargetType="{x:Type Control}">
                        <Setter Property="Margin" Value="0,0,10,0"/>
                        <Setter Property="VerticalAlignment" Value="Bottom"/>
                    </Style>
                </StackPanel.Resources>
                <Control FontSize="{StaticResource HFontSize}" Template="{StaticResource DateFilter}" DataContext="{Binding DateFilter}"/>
                <Control FontSize="{StaticResource HFontSize}" Template="{StaticResource RequestStatusFilter}" DataContext="{Binding StatusFilter}"/>
                <Control FontSize="{StaticResource HFontSize}" Template="{StaticResource PerformerFilter}" DataContext="{Binding PerformerFilter}"/>
                <Control FontSize="{StaticResource HFontSize}" Template="{StaticResource ProblemsFilter}" DataContext="{Binding ProblemsFilter}"/>
                <Control FontSize="{StaticResource HFontSize}" Template="{StaticResource ClientFilter}" DataContext="{Binding ClientFilter}"/>

                <CheckBox FontSize="{StaticResource HFontSize}"  VerticalAlignment="Bottom" IsChecked="{Binding HideCancelations}">
                    <CheckBox.Content>
                        <TextBlock VerticalAlignment="Center" Width="120" TextWrapping="Wrap" Text="Не показывать аннулированные"/>
                    </CheckBox.Content>
                </CheckBox>

                <CheckBox FontSize="{StaticResource HFontSize}"  VerticalAlignment="Bottom" IsChecked="{Binding HideReserved}">
                    <CheckBox.Content>
                        <TextBlock VerticalAlignment="Center" Width="130" TextWrapping="Wrap" Text="Не показывать забронированные"/>
                    </CheckBox.Content>
                </CheckBox>

                <Button FontSize="{StaticResource HFontSize}" Style="{StaticResource LightGrayButton2}" VerticalAlignment="Bottom" Margin="5,0,0,0" Width="130" Command="{Binding ClearFilterCommand}" Content="Очистить фильтр"/>
                <Button FontSize="{StaticResource HFontSize}" Style="{StaticResource PaleGreenButton}" VerticalAlignment="Bottom" Margin="5,0,0,0" Width="140" Command="{Binding UpdateCommand}" Content="Обновить"/>

                <!--<Button x:Name="TakeAJobBtn" VerticalAlignment="Top" Height="22" Width="130" Style="{StaticResource BurlyWoodButton}" FontWeight="SemiBold" Content="Взять в работу"
				        Command="{Binding TakeAJobCommand}" Margin="0,21,0,0"/>-->
            </StackPanel>
        </Border>
        <Border Grid.Row="0" Margin="5,5,5,5">
            <StackPanel Orientation="Horizontal">
                <StackPanel.Resources>
                    <Thickness x:Key="Margin" Left="5"/>
                    <Style TargetType="Button" BasedOn="{StaticResource GrayButton2}">
                        <Setter Property="FontSize" Value="{StaticResource HFontSize}"/>
                        <Setter Property="VerticalAlignment" Value="Bottom"/>
                    </Style>
                </StackPanel.Resources>
                <Button Content="Новые заявки" Command="{Binding ShowNewRequestsCmd}" Click="Button_Click"/>
                <StackPanel VerticalAlignment="Bottom" Margin="3,0,0,0" Orientation="Vertical">
                    <Control Width="36" FontSize="{StaticResource HFontSize}"  Margin="0,-1,0,0" Template="{StaticResource TextInfo}" Tag="{Binding NewRequestCount}"/>
                </StackPanel>
                <Button Content="Все мои заявки" Margin="{StaticResource Margin}" Command="{Binding ShowAllMyRequestsCmd}"/>
                <StackPanel VerticalAlignment="Bottom" Margin="3,0,0,0" Orientation="Vertical">
                    <Control Width="36" FontSize="{StaticResource HFontSize}"  Margin="0,-1,0,0" Template="{StaticResource TextInfo}" Tag="{Binding MyRequestCount}"/>
                </StackPanel>
                <!--<Button Content="Срочно нужен ответ" Margin="{StaticResource Margin}" Command="{Binding ShowNeedReplyRequestsCmd}"/>-->
                <Control FontSize="{StaticResource HFontSize}" Margin="5,0,0,0" Template="{StaticResource ProblemsControl}"/>
                <Button Width="120" Content="Все заявки" Command="{Binding ShowAllRequestsCmd}" Margin="5,0,0,0"/>
                <!--<Button x:Name="AppointPerformerBtn" Margin="10,0,0,0" VerticalAlignment="Bottom" Height="22" Width="180" Style="{StaticResource BlueButton}" FontWeight="SemiBold" 
				            Command="{Binding AppointPerformerCommand}" Content="Назначить исполнителя" IsEnabled="{Binding RequestJournal}" Visibility="{Binding IsSuperviser, Converter={StaticResource BoolToVis}}"/>-->
            </StackPanel>
        </Border>
        <Grid Grid.Row="2" VerticalAlignment="Stretch" ScrollViewer.CanContentScroll="True">
		    <Grid.RowDefinitions>
			    <RowDefinition>
				    <RowDefinition.Style>
					    <Style TargetType="{x:Type RowDefinition}">
						    <Style.Triggers>
							    <DataTrigger Binding="{Binding DataContext.HideAllRows, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
								    <Setter Property="Height" Value="0"/>
							    </DataTrigger>
							    <DataTrigger Binding="{Binding DataContext.HideAllRows, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="False">
								    <Setter Property="Height" Value="1*"/>
							    </DataTrigger>
						    </Style.Triggers>
					    </Style>
				    </RowDefinition.Style>
			    </RowDefinition>
			    <RowDefinition>
				    <RowDefinition.Style>
					    <Style TargetType="{x:Type RowDefinition}">
						    <Style.Triggers>
							    <DataTrigger Binding="{Binding DataContext.HideAllRows, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="False">
								    <Setter Property="Height" Value="Auto"/>
							    </DataTrigger>
							    <DataTrigger Binding="{Binding DataContext.HideAllRows, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
								    <Setter Property="Height" Value="1*"/>
							    </DataTrigger>
						    </Style.Triggers>
					    </Style>
				    </RowDefinition.Style>
			    </RowDefinition>
		    </Grid.RowDefinitions>

            <!--<ScrollViewer PreviewMouseWheel="UIElement_OnPreviewMouseWheel" Grid.Row="0" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">-->
                <DataGrid Name="DataGrid" VerticalScrollBarVisibility="Auto" helpers:DataGridBehavior2.DataGridDoubleClickCommand="{Binding ShowCorrespondenceCommand}" 
                          ItemsSource="{Binding Requests}" AutoGenerateColumns="False" Unloaded="FrameworkElement_OnUnloaded" CanUserAddRows="False" CanUserDeleteRows="False" 
                          CanUserSortColumns="False" CanUserReorderColumns="False" SelectionMode="Single" SelectedItem="{Binding SelectedItem}" HorizontalAlignment="Stretch" 
                          VerticalAlignment="Stretch">
				    <DataGrid.Resources>
					    <Style TargetType="{x:Type Button}">
						    <Setter Property="Margin" Value="0,0"/>
					    </Style>

                        <Style x:Key="DataGridCellBase" TargetType="DataGridCell" BasedOn="{StaticResource DataGridCellNoLostFocus}">
                            <Setter Property="FontWeight" Value="{Binding Seen, Converter={StaticResource BoolToFontWeightInvertConverter}}"/>
                            <Setter Property="FontSize" Value="13"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                                        <Grid Background="{TemplateBinding Background}">
                                            <ContentPresenter VerticalAlignment="Center" />
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <!--<Setter Property="Foreground" Value="White"/>-->
                                    <!--<Setter Property="Background" Value="#3399FF"/>-->
                                    <Setter Property="Background" Value="Silver"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>

                        <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource DataGridCellBase}"/>

                        <SolidColorBrush x:Key="IncomingMessageBrush" Color="DarkRed"/>
                        <SolidColorBrush x:Key="OutboxMessageBrush" Color="DarkGreen"/>
                        
                        <Style x:Key="LastMessageMtC" TargetType="DataGridCell" BasedOn="{StaticResource DataGridCellBase}">
                            <Setter Property="FontWeight" Value="Normal"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding MtCInfo.IsIncomming}" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource OutboxMessageBrush}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MtCInfo.IsIncomming}" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource IncomingMessageBrush}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>

                        <Style x:Key="LastMessageMtM" TargetType="DataGridCell" BasedOn="{StaticResource DataGridCellBase}">
                        <Setter Property="FontWeight" Value="Normal"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding MtCInfo.IsIncomming}" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource OutboxMessageBrush}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding MtCInfo.IsIncomming}" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource IncomingMessageBrush}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>

                        <Style TargetType="DataGrid">
                            <Style.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="DeepSkyBlue"/>
                            </Style.Resources>
                            <Setter Property="FontWeight" Value="Bold"/>
                            <Setter Property="FontSize" Value="15"/>
                        </Style>
                        
				    </DataGrid.Resources>
				    <DataGrid.Columns>
                        <DataGridTextColumn IsReadOnly="True" Binding="{Binding ., Converter={StaticResource RequestNumberConverter}}" Width="75">
                            <DataGridTextColumn.HeaderTemplate>
                                <DataTemplate>
                                    <TextBlock Text="№ запроса" TextWrapping="Wrap"/>
                                </DataTemplate>
                            </DataGridTextColumn.HeaderTemplate>
                        </DataGridTextColumn>

                        <DataGridTemplateColumn IsReadOnly="True" Header="Дата" Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Vertical" HorizontalAlignment="Center" Margin="5,0,5,0">
                                        <TextBlock HorizontalAlignment="Center" Text="{Binding Date, StringFormat={}{0:HH:mm}}"/>
                                        <TextBlock HorizontalAlignment="Center" Text="{Binding Date, StringFormat={}{0:dd.MM.yy}}"/>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <!--<DataGridTextColumn IsReadOnly="True" Header="Дата" Binding="{Binding Date, StringFormat=\{0:HH:mm\} /  \{0:dd.MM.yy\}}" Width="Auto"/>-->

                        <DataGridTemplateColumn IsReadOnly="True" Header="Заявка от" Width="Auto">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <StackPanel Width="150" Height="48" Name="Grid">
                                        <!--<Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>-->
                                        <TextBlock Margin="5,6,5,0" Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Name="SenderAddress" Text="{Binding SenderAddress}"/>
                                        <TextBlock Margin="5,0,5,0" Grid.Row="1" HorizontalAlignment="Left" Text="{Binding Theme}"
                                                   Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Bottom"/>
                                        <!--
                                        <TextBlock Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Name="SenderAddress" Text="{Binding FirstMessage.SenderAddress}"/>
                                        <TextBlock Grid.Row="1" HorizontalAlignment="Left" Text="{Binding FirstMessage.Theme, Converter={StaticResource RequestMessageThemeConverter}}"
                                                   Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Bottom"/>
                                        -->
                                    </StackPanel>
                                   
                                    <!--<Button VerticalAlignment="Top" Margin="5,2,5,5" Command="{Binding ChangeSenderAddressCommand}" Height="24" 
                                            Name="SenderAddressBtn" Content="{Binding FirstMessage.SenderAddress}" Foreground="Black"/>-->
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Source}" Value="2">
                                            <Setter TargetName="Grid" Property="Background" Value="LightBlue"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn Header="Смотр">
						    <DataGridTemplateColumn.CellTemplate>
							    <DataTemplate>
                                    <Grid>
                                        <ToggleButton Name="Button"  Width="32" Height="32">
                                            <Image Margin="0,0,0,0" Width="24" Height="24" Source="..\img\loupe_small.png" />
                                        </ToggleButton>
                                        <Popup Focusable="True" Name="Popup" Width="800" Height="400" AllowsTransparency="False" 
                                               PopupAnimation="Slide" StaysOpen="True" PlacementTarget="{Binding ElementName=Button}">
                                            <Popup.IsOpen>
                                                <MultiBinding Converter="{StaticResource MultiBooleanConverter}" Mode="OneWay">
                                                    <Binding ElementName="Button" Path="IsChecked"/>
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=DataGridCell}" Path="IsSelected"/>
                                                </MultiBinding>
                                            </Popup.IsOpen>
                                            <Border CornerRadius="5" BorderThickness="1" BorderBrush="DarkGray" Background="White">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="1*"/>
                                                    </Grid.RowDefinitions>
                                                    <Grid Background="{StaticResource PopupHeaderBrush}">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition Width="1*"/>
                                                            <ColumnDefinition Width="Auto"/>
                                                        </Grid.ColumnDefinitions>
                                                        <TextBlock Foreground="Black" Margin="5,0,0,0" Text="{Binding Number, StringFormat={}Заявка №{0}}"/>
                                                        <TextBlock Grid.Column="1" Foreground="Black" Margin="5,0,5,0" HorizontalAlignment="Center" Text="{Binding FirstMessage.Theme}"/>
                                                        <Button Grid.Column="2" Name="CloseButton" Style="{StaticResource CloseButton}"/>
                                                    </Grid>
                                                    <Separator Grid.Row="1"/>
                                                    <WebBrowser Grid.Row="2" Navigating="Browser_OnNavigating" Margin="5" Name="Browser" 
                                                            helpers:BrowserBehavior.Html="{Binding FirstMessage.HtmlWithHead}"/>
                                                </Grid>
                                            </Border>
                                        </Popup>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Value="False" Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridCell}, Path=IsSelected}">
                                            <Setter TargetName="Button" Property="IsChecked" Value="False"/>
                                        </DataTrigger>
                                        <EventTrigger SourceName="CloseButton" RoutedEvent="Button.Click">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard TargetName="Button" TargetProperty="IsChecked">
                                                        <BooleanAnimationUsingKeyFrames Duration="0:0:0.001">
                                                            <DiscreteBooleanKeyFrame Value="False"/>
                                                        </BooleanAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>
                                        <!--<EventTrigger SourceName="MaximizeButton" RoutedEvent="Button.Click">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard TargetName="Popup" TargetProperty="Width">
                                                        <DoubleAnimation From="800" To="1200" Duration="0:0:0.08" AutoReverse="False"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                                <BeginStoryboard>
                                                    <Storyboard TargetName="Popup" TargetProperty="Height">
                                                        <DoubleAnimation From="400" To="600" Duration="0:0:0.08" AutoReverse="False"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>-->
                                    </DataTemplate.Triggers>
							    </DataTemplate>
						    </DataGridTemplateColumn.CellTemplate>
					    </DataGridTemplateColumn>

					    <DataGridTemplateColumn IsReadOnly="True" Header="Статус">
						    <DataGridTemplateColumn.CellTemplate>
							    <DataTemplate>
								    <Grid Margin="5,2,5,2">
									    <Grid.RowDefinitions>
										    <RowDefinition/>
										    <RowDefinition/>
										    <RowDefinition/>
									    </Grid.RowDefinitions>
                                        <TextBlock Name="SubStatusTbl" Grid.Row="0" Text="{Binding Status, Converter={StaticResource RequestStatusConverter}}" FontSize="12" FontWeight="Black"/>
                                        <Separator Grid.Row="1"/>
                                        <ComboBox Name="StatusCbx" Grid.Row="2" Style="{DynamicResource ComboBoxFlatStyle}" ItemsSource="{Binding SubstatusDictionary}" 
                                                  SelectedIndex="{Binding StatusSelectedIndex, Mode=TwoWay}" SelectedItem="{Binding SubStatus, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                  Tag="{Binding SubStatus.ColorIndex}">
                                            <ComboBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding ., Converter={StaticResource RequestStatusConverter}}"/>
                                                </DataTemplate>
                                            </ComboBox.ItemTemplate>
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="SelectionChanged">
                                                    <i:InvokeCommandAction Command="{Binding StatusChangedCommand}" CommandParameter="{Binding ElementName=StatusCbx, Path=SelectedItem}"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </ComboBox>
								    </Grid>
							    </DataTemplate>
						    </DataGridTemplateColumn.CellTemplate>
					    </DataGridTemplateColumn>
                        
                        <DataGridTemplateColumn IsReadOnly="True">
                            <DataGridTemplateColumn.HeaderTemplate>
                                <DataTemplate>
                                   <StackPanel Orientation="Vertical">
                                       <TextBlock Text="История"/>
                                       <TextBlock Text="статусов"/>
                                    </StackPanel>
                                </DataTemplate>
                            </DataGridTemplateColumn.HeaderTemplate>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <ToggleButton Name="Button"  Width="32" Height="32">
                                            <Image Margin="0,0,0,0" Width="24" Height="24" Source="..\img\history3.png" />
                                        </ToggleButton>
                                        <Popup Focusable="True" Name="Popup" Width="Auto" Height="Auto" AllowsTransparency="False" 
                                               PopupAnimation="Slide" StaysOpen="True" PlacementTarget="{Binding ElementName=Button}">
                                            <Popup.IsOpen>
                                                <MultiBinding Converter="{StaticResource MultiBooleanConverter}" Mode="OneWay">
                                                    <Binding ElementName="Button" Path="IsChecked"/>
                                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=DataGridCell}" Path="IsSelected"/>
                                                </MultiBinding>
                                            </Popup.IsOpen>
                                            <Border CornerRadius="5" BorderThickness="1" BorderBrush="DarkGray" Background="White">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="1*"/>
                                                    </Grid.RowDefinitions>
                                                    <Grid Background="{StaticResource PopupHeaderBrush}">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto"/>
                                                            <ColumnDefinition Width="1*"/>
                                                            <ColumnDefinition Width="Auto"/>
                                                        </Grid.ColumnDefinitions>
                                                        <TextBlock Foreground="Black" Margin="5,0,0,0" Text="{Binding Number, StringFormat={}Заявка №{0}}"/>
                                                        <TextBlock Grid.Column="1" Foreground="Black" Margin="5,0,5,0" HorizontalAlignment="Center" Text="{Binding FirstMessage.Theme}"/>
                                                        <Button Grid.Column="2" Name="CloseButton" Style="{StaticResource CloseButton}"/>
                                                    </Grid>
                                                    <Separator Grid.Row="1"/>
                                                    <ListView Grid.Row="2" ItemsSource="{Binding RequestStatuses}">
                                                        <ListView.View>
                                                            <GridView>
                                                                <GridView.Columns>
                                                                    <GridViewColumn Header="Статус" DisplayMemberBinding="{Binding Name}"/>
                                                                    <GridViewColumn Header="Дата" DisplayMemberBinding="{Binding Date, StringFormat={}{0:HH:mm} / {0:dd.MM.yy}}"/>
                                                                    <GridViewColumn Header="Менеджер" DisplayMemberBinding="{Binding ManagerName}"/>
                                                                </GridView.Columns>
                                                            </GridView>
                                                        </ListView.View>
                                                    </ListView>
                                                    <!--<WebBrowser Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" Navigating="Browser_OnNavigating" Margin="5" Name="Browser" 
                                                            helpers:BrowserBehavior.Html="{Binding FirstMessage.HtmlWithHead}"/>-->
                                                </Grid>
                                            </Border>
                                        </Popup>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Value="False" Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridCell}, Path=IsSelected}">
                                            <Setter TargetName="Button" Property="IsChecked" Value="False"/>
                                        </DataTrigger>
                                        <EventTrigger SourceName="CloseButton" RoutedEvent="Button.Click">
                                            <EventTrigger.Actions>
                                                <BeginStoryboard>
                                                    <Storyboard TargetName="Button" TargetProperty="IsChecked">
                                                        <BooleanAnimationUsingKeyFrames Duration="0:0:0.001">
                                                            <DiscreteBooleanKeyFrame Value="False"/>
                                                        </BooleanAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger.Actions>
                                        </EventTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn IsReadOnly="True">
                            <DataGridTemplateColumn.HeaderTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <TextBlock Name="TextBlock"  Text="Исполнитель"/>
                                        <Button x:Name="AppointPerformerBtn" HorizontalAlignment="Center" Height="26" Width="120" Style="{StaticResource BlueButton}" FontWeight="SemiBold" 
				                            Command="{Binding DataContext.AppointPerformerCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Content="Исполнитель" 
                                            IsEnabled="{Binding DataContext.RequestJournal, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}"
                                            Visibility="{Binding DataContext.IsSuperviser, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}, Converter={StaticResource BoolToVis}}"/>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding DataContext.IsSuperviser, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}" Value="True">
                                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                </DataTemplate.Triggers>
                                </DataTemplate>
                            </DataGridTemplateColumn.HeaderTemplate>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Margin="5" Text="{Binding Performer}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
					    
                        <DataGridTemplateColumn Visibility="Collapsed" IsReadOnly="True" Header="Переписка с клиентом" Width="120">
                            <DataGridTemplateColumn.HeaderTemplate>
                                <DataTemplate>
                                    <TextBlock Text="Переписка с клиентом" TextWrapping="Wrap"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.HeaderTemplate>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button x:Name="Button" Width="100" HorizontalAlignment="Center" Style="{StaticResource ReplyButton}" Content="Ответить"
									    Command="{Binding DataContext.ShowCorrespWithClientCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn IsReadOnly="True" Header="Переписка с клиентом" Width="Auto" CellStyle="{StaticResource LastMessageMtC}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="1*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Margin="5,0,0,0" Text="{Binding MtCInfo, Converter={StaticResource RequestMessagesHistoryConverter2}}"/>
                                        <Button Margin="5" Grid.Column="1" Width="19" Height="19" Style="{StaticResource ImageButton}" Content="{StaticResource GearImage}"
                                                 Command="{Binding DataContext.ShowCorrespWithClientCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn Visibility="Collapsed" IsReadOnly="True" Header="Переписка с сотрудником" Width="120">
                            <DataGridTemplateColumn.HeaderTemplate>
                                <DataTemplate>
                                <TextBlock Margin="5,0,0,0" Text="Переписка с сотрудниками" TextWrapping="Wrap"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.HeaderTemplate>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Button x:Name="Button" Width="100" Style="{StaticResource ReplyButton}" FontWeight="SemiBold" Content="Ответить"
									    Command="{Binding DataContext.ShowCorrespWithManagerCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn IsReadOnly="True" Header="Переписка с сотрудником" Width="Auto" CellStyle="{StaticResource LastMessageMtM}">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="1*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{Binding MtMInfo, Converter={StaticResource RequestMessagesHistoryConverter2}}"/>
                                        <Button Margin="5" Grid.Column="1" Width="19" Height="19" Style="{StaticResource ImageButton}" Content="{StaticResource GearImage}"
                                                     Command="{Binding DataContext.ShowCorrespWithManagerCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                        <DataGridTemplateColumn IsReadOnly="True" Header="Проверено супервайзером" Width="125">
                            <DataGridTemplateColumn.HeaderTemplate>
                                <DataTemplate>
                                    <TextBlock Text="Проверено супервайзером" TextWrapping="Wrap"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.HeaderTemplate>
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Button Content="Подтвердить" Command="{Binding SuperviserCheckedCmd}" Width="100"
                                                Style="{StaticResource ReplyButton}" FontWeight="SemiBold" 
                                                Visibility="{Binding SuperviserChecked, Converter={StaticResource SuperviserCheckedConverter}}"/>
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Center" Margin="5,0,5,0" 
                                                    Visibility="{Binding SuperviserChecked, Converter={StaticResource IfExistToVisibilityConverter}}">
                                            <TextBlock HorizontalAlignment="Center" Text="{Binding SuperviserChecked, StringFormat={}{0:HH:mm}}"/>
                                            <TextBlock HorizontalAlignment="Center" Text="{Binding SuperviserChecked, StringFormat={}{0:dd.MM.yy}}"/>
                                        </StackPanel>
                                    </Grid>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>

                    </DataGrid.Columns>

				    <DataGrid.RowStyle>
					    <Style TargetType="{x:Type DataGridRow}">
						    <Style.Triggers>
							    <DataTrigger Binding="{Binding DataContext.HideAllRows, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" Value="True">
								    <Setter Property="Visibility" Value="Collapsed"/>
								    <Setter Property="Height" Value="0"/>
							    </DataTrigger>
						    </Style.Triggers>
					    </Style>
				    </DataGrid.RowStyle>

                    <DataGrid.ColumnHeaderStyle>
					    <Style TargetType="{x:Type DataGridColumnHeader}">
						    <Setter Property="Command" Value="{Binding DataContext.ShowDataGridCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
					    </Style>
				    </DataGrid.ColumnHeaderStyle>

				    <!--
                    <DataGrid.ContextMenu>
                        <ContextMenu>
                            <MenuItem Name="MenuItemBind" Header="Привязать" Command="{Binding BindingButtonCommand}" CommandParameter="{Binding Path=SelectedIndex, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}}">
                                <MenuItem.Icon>
                                    <Image Width="24" Height="24" Source="..\img\bind.png" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <Popup x:Name="PopupBinding" PlacementTarget="{Binding ElementName=DataGrid, Path=SelectedItem}" IsOpen="{Binding PopupIsOpen}" AllowsTransparency="True" 
                                   PopupAnimation="Slide" StaysOpen="True">
                                <ComboBox SelectedItem="{Binding MessageBinder.SelectedId, RelativeSource={RelativeSource TemplatedParent}}"
                                    ItemsSource="{Binding DataContext.RequestIdCollection, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Vertical">
                                                <TextBlock Text="{Binding .,StringFormat={}№ {0}}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                </ComboBox>
                            </Popup>
                        </ContextMenu>
                    </DataGrid.ContextMenu>-->
			    </DataGrid>
		    <!--</ScrollViewer>-->
		    <!--<Border Grid.Row="2" Style="{StaticResource CorrespondenceBorder}" Visibility="{Binding DataContext.HideAllRows, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}, 
                    Converter={StaticResource BooleanToVisibilityConverterInvert}}">
                <view:RequestMessagesView Style="{StaticResource CorrespondenceView}" BorderBrush="Black" BorderThickness="0" />
            </Border>-->

            <Border Grid.Row="1" Style="{StaticResource CorrespondenceBorder}" Visibility="{Binding DataContext.ShowCorrespondenceWithClient, Converter={StaticResource BoolToVis}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
			    <view:RequestMessagesView DataContext="{Binding RequestMessagesViewModelMtC}" BorderBrush="Black" BorderThickness="0" />
		    </Border>
		    <Border Grid.Row="1" Style="{StaticResource CorrespondenceBorder}" Visibility="{Binding DataContext.ShowCorrespondenceWithManager, Converter={StaticResource BoolToVis}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}">
			    <view:RequestMessagesView DataContext="{Binding RequestMessagesViewModelMtM}" BorderBrush="Black" BorderThickness="0" />
		    </Border>
	    </Grid>
    </Grid>
</UserControl>